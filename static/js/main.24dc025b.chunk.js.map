{"version":3,"sources":["components/ColorSchemeSwitch.js","components/HookedHeader.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["ColorSchemeSwitch","props","currentColorScheme","onPress","e","switch","size","HookedHeader","backgroundColor","direction","justifyContent","level","color","text","position","right","Movie","movie","poster","Poster","Title","height","objectFit","alt","TItle","src","Year","Search","useState","searchValue","setSearchValue","gap","label","labelPosition","placeholder","value","onChange","variant","search","initialColorSchemeState","colorScheme","initialState","loading","movies","errorMessage","colorSchemeReducer","state","action","type","reducer","payload","error","App","useReducer","colorSchemeStete","colorSchemeDispatcher","dispatch","useEffect","fetch","then","response","json","jsonResponse","theme","defaultTheme","minHeight","Response","Error","columns","repeat","autoRows","alignSelf","justifySelf","aria-label","isIndeterminate","className","map","index","key","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+UAiCeA,EA5BW,SAACC,GAUzB,OACE,kBAAC,IAAD,KACgC,UAA7BA,EAAMC,mBAEL,kBAAC,IAAD,CAAcC,QARC,SAACC,GACpBH,EAAMI,OAAO,oBAQP,kBAAC,IAAD,CAAUC,KAAK,OAIf,kBAAC,IAAD,CAAcH,QAjBF,SAACC,GACnBH,EAAMI,OAAO,mBAiBL,kBAAC,IAAD,CAAOC,KAAK,SCETC,EAvBM,SAACN,GACpB,OACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAMO,gBAAgB,WAEpB,kBAAC,IAAD,CAAMC,UAAU,MAAMC,eAAe,UAEnC,kBAAC,IAAD,CAASC,MAAM,KACb,0BAAMC,MAAM,SAASX,EAAMY,OAE7B,kBAAC,IAAD,CAAMC,SAAS,WAAWC,MAAM,UAC9B,kBAAC,EAAD,CACEV,OAAQJ,EAAMI,OACdH,mBAAoBD,EAAMC,0B,QCWzBc,EAvBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTC,EACa,QAAjBD,EAAME,OAJR,qGAIuDF,EAAME,OAC7D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMV,UAAU,MAAMC,eAAe,UACnC,kBAAC,IAAD,CAASC,MAAM,KAAKM,EAAMG,QAE5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAO,YACPC,UAAU,UACVC,IAAG,2BAAsBN,EAAMO,OAC/BC,IAAKP,KAGT,kBAAC,IAAD,CAAMT,UAAU,MAAMC,eAAe,UACnC,kBAAC,IAAD,SAAQO,EAAMS,KAAd,Q,QCMOC,EA1BA,SAAC1B,GAAW,IAAD,EACc2B,mBAAS,IADvB,mBACjBC,EADiB,KACJC,EADI,KAiBxB,OACM,kBAAC,IAAD,CAAMrB,UAAU,MAAMsB,IAAI,YACxB,kBAAC,IAAD,CAAWC,MAAM,QAAQC,cAAc,OAAOC,YAAY,QACxDC,MAAON,EAAaO,SAjBG,SAACD,GAChCL,EAAeK,MAiBT,kBAAC,IAAD,CAAQE,QAAQ,MAAMlC,QAVH,SAACC,GAE1BH,EAAMqC,OAAOT,GALbC,EAAe,MAaT,Y,+BCfJS,EAA0B,CAC9BC,YAAa,SAGTC,EAAe,CACnBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAGVC,EAAqB,SAACC,EAAOC,GACjC,OAAQA,EAAOC,MACb,IAAK,gBACH,OAAO,eACFF,EADL,CAEEN,YAAa,UAEjB,IAAK,iBACH,OAAO,eACFM,EADL,CAEEN,YAAa,SAEjB,QACE,OAAOM,IAIPG,EAAU,SAACH,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,wBACH,OAAO,eACFF,EADL,CAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,wBACH,OAAO,eACFE,EADL,CAEEJ,SAAS,EACTC,OAAQI,EAAOG,UAEnB,IAAK,wBACH,OAAO,eACFJ,EADL,CAEEJ,SAAS,EACTE,aAAcG,EAAOI,QAEzB,QACE,OAAOL,IAgIEM,EA5HH,WAAO,IAAD,EAEZC,qBAAWR,EAAoBN,GAFnB,mBACTe,EADS,KACSC,EADT,OAIUF,qBAAWJ,EAASR,GAJ9B,mBAITK,EAJS,KAIFU,EAJE,KAMhBC,qBAAU,WACRC,MA7DkB,kDA8DfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAAS,CACPR,KAAM,wBACNE,QAASY,EAAanC,cAG3B,IAEH,IA0BQgB,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAE9B,OACE,kBAAC,IAAD,CAAUqB,MAAOC,IACfxB,YAAac,EAAiBd,aAI9B,kBAAC,IAAD,CAAM/B,UAAU,SAASsB,IAAI,WAAWkC,UAAU,SAGhD,kBAAC,EAAD,CACEpD,KAAK,SACLR,OAjBkB,SAAA0C,GACxBQ,EAAsB,CAAEP,KAAMD,KAiBxB7C,mBAAoBoD,EAAiBd,cAGvC,kBAAC,IAAD,CAAM/B,UAAU,MAAMC,eAAe,UACnC,kBAAC,EAAD,CAAQ4B,OA5CK,SAAAT,GACnB2B,EAAS,CACPR,KAAM,0BAGRU,MAAM,8BAAD,OAA+B7B,EAA/B,qBACF8B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaI,SACfV,EAAS,CACPR,KAAM,wBACNE,QAASY,EAAanC,SAGxB6B,EAAS,CACPR,KAAM,wBACNG,MAAOW,EAAaK,eAgCxB,kBAAC,IAAD,CAAM1D,UAAU,MAAMC,eAAe,UACnC,kBAAC,IAAD,+CAIF,kBAAC,IAAD,CACE0D,QAASC,YAAO,WAAY,aAC5BC,SAAS,YACT5D,eAAe,SACfqB,IAAI,YACHW,IAAYE,EAEX,kBAAC,IAAD,CAEE2B,UAAU,SAEVC,YAAY,UACZ,kBAAC,IAAD,CAAgBC,aAAW,gBAAWC,iBAAe,KAErD9B,EAEF,kBAAC,IAAD,CAEE4B,YAAY,UACZ,yBAAKG,UAAU,gBAAgB/B,IAI7BD,EAAOiC,KAAI,SAAC3D,EAAO4D,GAAR,OACT,kBAAC,IAAD,CACErE,gBAAgB,YAChB,kBAAC,EAAD,CAAOsE,IAAG,UAAKD,EAAL,YAAc5D,EAAMG,OAASH,MAAOA,SAS1D,kBAAC,IAAD,CAAQsD,UAAU,UAEhB,kBAAC,IAAD,KACE,uBAAGQ,KAAK,oGAAoGC,OAAO,UAAnH,wEAIF,6BACA,kBAAC,IAAD,KACE,uBAAGD,KAAK,6DAA6DC,OAAO,UAA5E,4FCnKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM+C,c","file":"static/js/main.24dc025b.chunk.js","sourcesContent":["import React from 'react';\nimport { ActionButton, View } from '@adobe/react-spectrum';\nimport Light from '@spectrum-icons/workflow/Light';\nimport Contrast from '@spectrum-icons/workflow/Contrast';\n\nconst ColorSchemeSwitch = (props) => {\n\n  const turnLightOn = (e) => {\n    props.switch(\"TURN_LIGHT_ON\")\n  }\n\n  const turnLightOff = (e) => {\n    props.switch(\"TURN_LIGHT_OFF\")\n  }\n\n  return (\n    <View>\n      {props.currentColorScheme === \"light\" ? (\n        // button to turn light off\n        <ActionButton onPress={turnLightOff}>\n          <Contrast size=\"L\" />\n        </ActionButton>\n      ) : (\n          // button to turn light on\n          <ActionButton onPress={turnLightOn}>\n            <Light size=\"L\" />\n          </ActionButton>\n        )\n      }\n    </View>\n  );\n};\n\nexport default ColorSchemeSwitch;","import React from \"react\";\nimport { Header, Heading, View, Flex } from '@adobe/react-spectrum';\nimport ColorSchemeSwitch from './ColorSchemeSwitch';\n\nconst HookedHeader = (props) => {\n  return (\n    <Header>\n      {/* 背景色 */}\n      <View backgroundColor=\"red-500\">\n        {/* 文言を中央寄せ */}\n        <Flex direction=\"row\" justifyContent=\"center\">\n          {/* h2と同等 */}\n          <Heading level=\"2\" >\n            <font color=\"white\">{props.text}</font>\n          </Heading>\n          <View position=\"absolute\" right=\"size-0\">\n            <ColorSchemeSwitch\n              switch={props.switch}\n              currentColorScheme={props.currentColorScheme}>\n            </ColorSchemeSwitch>\n          </View>\n        </Flex>\n      </View>\n    </Header>\n  );\n};\n\nexport default HookedHeader;","import React from \"react\";\nimport { Image, Heading, View, Flex, Text} from '@adobe/react-spectrum';\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\nconst Movie = ({ movie }) => {\n  const poster =\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n  return (\n    <View>\n      <Flex direction=\"row\" justifyContent=\"center\">\n        <Heading level=\"4\">{movie.Title}</Heading>\n      </Flex>\n      <View>\n        <Image\n          height=\"size-1600\"\n          objectFit=\"contain\"\n          alt={`The movie title: ${movie.TItle}`}\n          src={poster}\n        />\n      </View>\n      <Flex direction=\"row\" justifyContent=\"center\">\n        <Text>({movie.Year})</Text>\n      </Flex>\n    </View>\n  );\n};\n\nexport default Movie;\n","import React, { useState } from \"react\";\nimport { TextField, Button, Flex, } from '@adobe/react-spectrum';\n\nconst Search = (props) => {\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const handleSearchInputChanges = (value) => { // onChangeイベントは引数がvalueになる\n    setSearchValue(value);\n  }\n\n  const resetInputField = () => {\n    setSearchValue(\"\");\n  }\n\n  const callSearchFunction = (e) => {\n    // e.preventDefault();                    // onPress event doesn't has preventDefault().\n    props.search(searchValue);\n    resetInputField();\n  }\n\n  return (\n        <Flex direction=\"row\" gap=\"size-100\">\n          <TextField label=\"Title\" labelPosition=\"side\" placeholder=\"title\"\n            value={searchValue} onChange={handleSearchInputChanges} />\n          <Button variant=\"cta\" onPress={callSearchFunction}>Search</Button>\n      </Flex>\n  );\n};\n\nexport default Search;","import React, { useReducer, useEffect } from 'react';\nimport './App.css';\nimport HookedHeader from \"./HookedHeader\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\nimport { Provider, defaultTheme, Flex, View, Text, Grid, repeat, Footer, ProgressCircle, Link } from '@adobe/react-spectrum';\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\"; // you should replace this with yours\n\nconst initialColorSchemeState = {\n  colorScheme: \"light\"\n};\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst colorSchemeReducer = (state, action) => {\n  switch (action.type) {\n    case \"TURN_LIGHT_ON\":\n      return {\n        ...state,\n        colorScheme: \"light\"\n      };\n    case \"TURN_LIGHT_OFF\":\n      return {\n        ...state,\n        colorScheme: \"dark\"\n      };\n    default:\n      return state;\n  };\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [colorSchemeStete, colorSchemeDispatcher]\n    = useReducer(colorSchemeReducer, initialColorSchemeState)\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n  const searchMethod = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search\n          });\n        } else {\n          dispatch({\n            type: \"SEARCH_MOVIES_FAILURE\",\n            error: jsonResponse.Error\n          });\n        }\n      });\n  };\n\n  const switchColorScheme = action => {\n    colorSchemeDispatcher({ type: action })\n  };\n\n  const { movies, errorMessage, loading } = state;\n\n  return (\n    <Provider theme={defaultTheme}\n      colorScheme={colorSchemeStete.colorScheme}>\n        \n      {/* 全体をflexbox化する */}\n      {/* ダークモードでも白地が見えないように画面の高さ分をコンテンツ領域で確保する */}\n      <Flex direction=\"column\" gap=\"size-100\" minHeight=\"100vh\">\n\n        {/* ヘッダー部 */}\n        <HookedHeader\n          text=\"HOOKED\"\n          switch={switchColorScheme}\n          currentColorScheme={colorSchemeStete.colorScheme} />\n\n        {/* 検索部 中央寄せにする*/}\n        <Flex direction=\"row\" justifyContent=\"center\">\n          <Search search={searchMethod} />\n        </Flex>\n\n        {/* ガイダンス部 中央寄せにする */}\n        <Flex direction=\"row\" justifyContent=\"center\">\n          <Text>Sharing a fwe of our favourite movies</Text>\n        </Flex>\n\n        {/* コンテンツ部 Grid化する */}\n        <Grid\n          columns={repeat('auto-fit', 'size-2400')}\n          autoRows=\"size-2400\"\n          justifyContent=\"center\"\n          gap=\"size-200\">\n          {loading && !errorMessage ? (\n            // ローディング表示\n            <View\n              // 上下中央表示\n              alignSelf=\"center\"\n              // 左右中央表示（gridのrpeatを無視）\n              justifySelf=\"center\">\n              <ProgressCircle aria-label=\"Loading…\" isIndeterminate />\n            </View>\n          ) : errorMessage ? (\n            // エラーメッセージ表示\n            <View\n              // 左右中央表示（gridのrpeatを無視）\n              justifySelf=\"center\">\n              <div className=\"errorMessage\">{errorMessage}</div>\n            </View>\n          ) : (\n                // コンテンツ表示\n                movies.map((movie, index) => (\n                  <View\n                    backgroundColor=\"gray-200\">\n                    <Movie key={`${index}-${movie.Title}`} movie={movie} />\n                  </View>\n                ))\n              )}\n\n\n        </Grid>\n\n        {/* フッター リンクをつけてみる*/}\n        <Footer alignSelf=\"center\">\n          {/* Linkを使うとダークモードでも見やすく色が変わる */}\n          <Link>\n            <a href=\"https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/\" target=\"_blank\">\n              freeCodeCamp：How to build a movie search app using React Hooks\n          </a>\n          </Link>\n          <br />\n          <Link>\n            <a href=\"https://react-spectrum.adobe.com/react-spectrum/index.html\" target=\"_blank\">\n              React Spectrum：A React implementation of Spectrum, Adobe’s design system.\n          </a>\n          </Link>\n        </Footer>\n      </Flex>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n// reset css\nimport 'modern-css-reset';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}